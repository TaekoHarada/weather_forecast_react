{"version":3,"sources":["components/SearchForecast.jsx","components/Forecast.jsx","components/ThreeDaysForecast.jsx","components/Location.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["SearchForecast","_ref","city","setCity","onComponentMount","React","createElement","onSubmit","e","preventDefault","console","log","htmlFor","id","type","value","onChange","target","className","Forecast","day_weather","0","1","2","3","4","5","6","7","8","9","10","11","date","Date","dt","getMonth","getDate","src","weather_id","weather","main","parseInt","temp","max","min","ThreeDaysForecast","list","Location","APIID","useState","setWeather","loading","setLoading","async","city_data","city_name","response","fetch","concat","ok","Object","hasOwn","keys","length","Error","json","status","error","getCityData","name","weather_data","lat","lon","getWeatherData","useEffect","App","Fragment","href","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.650fba5b.chunk.js","sourcesContent":["// Component for a search form\n// which search 3 days weather forecast by a location entered in the text box\n\nimport React from \"react\";\n\nexport function SearchForecast({ city, setCity, onComponentMount }) {\n  function handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"Event !!\");\n    onComponentMount(city);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"search_box\">Location</label>\n      <input\n        id=\"search_box\"\n        type=\"text\"\n        value={city}\n        onChange={(e) => setCity(e.target.value)}\n      />\n      <button type=\"submit\" className=\"search_btn\">\n        Go\n      </button>\n    </form>\n  );\n}\n","import React from \"react\";\n\nexport function Forecast({ day_weather }) {\n  // convert date imformation\n  function getMonDay(date) {\n    const months = {\n      0: \"Jan\",\n      1: \"Feb\",\n      2: \"Mar\",\n      3: \"Apr\",\n      4: \"May\",\n      5: \"Jan\",\n      6: \"Jul\",\n      7: \"Aug\",\n      8: \"Sep\",\n      9: \"Oct\",\n      10: \"Nov\",\n      11: \"Dec\",\n    };\n    return months[date.getMonth()] + \" \" + date.getDate();\n  }\n\n  // get a weather picture by weather id (OpenWeather)\n  function getWeatherPic(weather_id) {\n    // weather_img = \"images/clear.png\";\n    if ((weather_id >= 200) & (weather_id < 300)) {\n      return \"images/thunderstorm.png\"; //Thunderstorm\n    } else if ((weather_id >= 300) & (weather_id < 400)) {\n      return \"images/drizzle.png\"; // Drizzle\n    } else if ((weather_id >= 500) & (weather_id < 600)) {\n      return \"images/rain.png\"; // Rain\n    } else if ((weather_id >= 600) & (weather_id < 700)) {\n      return \"images/snow.png\"; // Snow\n    } else if ((weather_id >= 700) & (weather_id < 800)) {\n      return \"images/atmosphere.png\"; // Atmosphere\n    } else if (weather_id == 800) {\n      return \"images/clear.png\"; // Clear\n    } else if ((weather_id >= 800) & (weather_id < 900)) {\n      return \"images/clouds.png\"; // Clouds\n    } else {\n      return \"\";\n    }\n  }\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"date\">{getMonDay(new Date(day_weather.dt * 1000))}</div>\n      <img\n        src={getWeatherPic(day_weather.weather[0].id)}\n        className=\"weather_img\"\n      />\n      <p className=\"main_weather\">{day_weather.weather[0].main}</p>\n      <div className=\"max_tmp\">\n        <label>MAX</label>\n        <p>{parseInt(day_weather.temp.max - 273.15) + \"℃\"}</p>\n      </div>\n      <div className=\"min_tmp\">\n        <label>MIN</label>\n        <p>{parseInt(day_weather.temp.min - 273.15) + \"℃\"}</p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Forecast } from \"./Forecast\";\n\nexport function ThreeDaysForecast({ weather }) {\n  console.log(weather);\n  return (\n    <div className=\"three_days_forecast\">\n      <Forecast day_weather={weather.list[0]} />\n      <Forecast day_weather={weather.list[1]} />\n      <Forecast day_weather={weather.list[2]} />\n    </div>\n  );\n}\n","// A Location container including 'search form' and '3 days weather forecast'\n\nimport React, { useState, useEffect } from \"react\";\nimport { SearchForecast } from \"./SearchForecast\";\nimport { ThreeDaysForecast } from \"./ThreeDaysForecast\";\n\nexport function Location() {\n  const APIID = \"431416ee6ac11ff008eca9e762cf30d3\"; // Access key for OpenWeather\n  const DEFAULT_CITY = \"Calgary\"; //later it will be determine from user's location\n\n  const [city, setCity] = useState(DEFAULT_CITY);\n  const [weather, setWeather] = useState({});\n  const [loading, setLoading] = useState(true); //until fetching weather data, do not show weather information\n\n  // fetch city imformation (OpenWeather) including the location by city name\n  async function getCityData(city_name) {\n    try {\n      const response = await fetch(\n        `http://api.openweathermap.org/geo/1.0/direct?q=${city_name}&limit=1&appid=${APIID}`\n      );\n      // No error in response data\n      if (response.ok) {\n        // empty object\n        if (Object.hasOwn(response)) {\n          console.log(\"No data: \", Object.keys(response).length);\n          throw new Error(Object.hasOwn(response));\n        } else {\n          const city_data = await response.json();\n\n          return city_data;\n        }\n      } else {\n        throw new Error(response.status);\n      }\n    } catch (error) {\n      console.error(\"ERROR\", error);\n      return error;\n    }\n  }\n\n  //get weather data (OpenWeather) by the location(lat, lon)\n  async function getWeatherData(lat, lon) {\n    try {\n      const response = await fetch(\n        `http://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&appid=${APIID}`\n      );\n      // No error in response data\n      if (response.ok) {\n        const weather_data = await response.json();\n        return weather_data;\n      } else {\n        throw new Error(response.status);\n      }\n    } catch (error) {\n      console.error(\"ERROR\", error);\n      return error;\n    }\n  }\n\n  const onComponentMount = async () => {\n    try {\n      console.log(\"Component is mounted!\");\n      // fetch city imformation by city name\n      const city_data = await getCityData(city);\n      // convert the city name to the name in OpenWeather data\n      setCity(city_data[0].name);\n      // fetch weather imformation by city's location\n      const weather_data = await getWeatherData(\n        city_data[0].lat,\n        city_data[0].lon\n      );\n\n      // Update the state with the fetched weather data\n      setWeather(weather_data);\n    } catch (error) {\n      // Set the ci\n      setCity(\"City is not found...\");\n      console.error(\"Error fetching data:\", error);\n      return error;\n    } finally {\n      // Set loading to false after fetching data\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Call the function when the component first mounts\n    onComponentMount();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"location\">\n        <h2>{city}</h2>\n        <SearchForecast city={city} setCity={setCity} />\n        <div>Loading...</div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"location\">\n        <h2>{city}</h2>\n        <SearchForecast\n          city={city}\n          setCity={setCity}\n          onComponentMount={onComponentMount}\n        />\n        <ThreeDaysForecast weather={weather} />\n      </div>\n    );\n  }\n}\n","import \"./styles/styles.css\";\nimport React, { useState } from \"react\";\nimport { Location } from \"./components/Location\";\n\nexport default function App() {\n  return (\n    <React.Fragment>\n      <header>\n        <h1>Weather Forecast</h1>\n        <div className=\"about\">\n          <a href=\"https://github.com/TaekoHarada/weather_forcast_react\">\n            Github - Weather Forecast (React)\n          </a>\n          Taeko Harada\n        </div>\n      </header>\n      <div id=\"container\">\n        <Location />\n        <Location />\n        <Location />\n      </div>\n      <footer>\n        <p className=\"about\">\n          Taeko Harada\n          <a href=\"https://github.com/TaekoHarada/weather_forcast_react\">\n            Github - Weather Forecast (React)\n          </a>\n        </p>\n      </footer>\n    </React.Fragment>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}