{"ast":null,"code":"var _jsxFileName = \"/Users/taekoharada/Documents/myProject/weather_forcast_react/src/components/Forecast.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Forecast({\n  day_weather\n}) {\n  // convert date imformation\n  function getMonDay(date) {\n    const months = {\n      0: \"Jan\",\n      1: \"Feb\",\n      2: \"Mar\",\n      3: \"Apr\",\n      4: \"May\",\n      5: \"Jan\",\n      6: \"Jul\",\n      7: \"Aug\",\n      8: \"Sep\",\n      9: \"Oct\",\n      10: \"Nov\",\n      11: \"Dec\"\n    };\n    return months[date.getMonth()] + \" \" + date.getDate();\n  }\n\n  // get a weather picture by weather id (OpenWeather)\n  function getWeatherPic(weather_id) {\n    // weather_img = \"images/clear.png\";\n    if (weather_id >= 200 & weather_id < 300) {\n      return \"images/thunderstorm.png\"; //Thunderstorm\n    } else if (weather_id >= 300 & weather_id < 400) {\n      return \"images/drizzle.png\"; // Drizzle\n    } else if (weather_id >= 500 & weather_id < 600) {\n      return \"images/rain.png\"; // Rain\n    } else if (weather_id >= 600 & weather_id < 700) {\n      return \"images/snow.png\"; // Snow\n    } else if (weather_id >= 700 & weather_id < 800) {\n      return \"../images/atmosphere.png\"; // Atmosphere\n    } else if (weather_id == 800) {\n      return \"../images/clear.png\"; // Clear\n    } else if (weather_id >= 800 & weather_id < 900) {\n      return \"../images/clouds.png\"; // Clouds\n    } else {\n      return \"\";\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: getMonDay(new Date(day_weather.dt * 1000))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: day_weather.weather[0].main\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: day_weather.weather[0].id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: getWeatherPic(day_weather.weather[0].id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: parseInt(day_weather.temp.max - 273.15) + \"邃ソ"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: parseInt(day_weather.temp.min - 273.15) + \"邃ソ"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_c = Forecast;\nvar _c;\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Forecast","day_weather","getMonDay","date","months","getMonth","getDate","getWeatherPic","weather_id","children","Date","dt","fileName","_jsxFileName","lineNumber","columnNumber","weather","main","id","src","parseInt","temp","max","min","_c","$RefreshReg$"],"sources":["/Users/taekoharada/Documents/myProject/weather_forcast_react/src/components/Forecast.jsx"],"sourcesContent":["import React from \"react\";\n\nexport function Forecast({ day_weather }) {\n  // convert date imformation\n  function getMonDay(date) {\n    const months = {\n      0: \"Jan\",\n      1: \"Feb\",\n      2: \"Mar\",\n      3: \"Apr\",\n      4: \"May\",\n      5: \"Jan\",\n      6: \"Jul\",\n      7: \"Aug\",\n      8: \"Sep\",\n      9: \"Oct\",\n      10: \"Nov\",\n      11: \"Dec\",\n    };\n    return months[date.getMonth()] + \" \" + date.getDate();\n  }\n\n  // get a weather picture by weather id (OpenWeather)\n  function getWeatherPic(weather_id) {\n    // weather_img = \"images/clear.png\";\n    if ((weather_id >= 200) & (weather_id < 300)) {\n      return \"images/thunderstorm.png\"; //Thunderstorm\n    } else if ((weather_id >= 300) & (weather_id < 400)) {\n      return \"images/drizzle.png\"; // Drizzle\n    } else if ((weather_id >= 500) & (weather_id < 600)) {\n      return \"images/rain.png\"; // Rain\n    } else if ((weather_id >= 600) & (weather_id < 700)) {\n      return \"images/snow.png\"; // Snow\n    } else if ((weather_id >= 700) & (weather_id < 800)) {\n      return \"../images/atmosphere.png\"; // Atmosphere\n    } else if (weather_id == 800) {\n      return \"../images/clear.png\"; // Clear\n    } else if ((weather_id >= 800) & (weather_id < 900)) {\n      return \"../images/clouds.png\"; // Clouds\n    } else {\n      return \"\";\n    }\n  }\n\n  return (\n    <div>\n      <div>{getMonDay(new Date(day_weather.dt * 1000))}</div>\n      <p>{day_weather.weather[0].main}</p>\n      <p>{day_weather.weather[0].id}</p>\n      <img src={getWeatherPic(day_weather.weather[0].id)} />\n      <p>{parseInt(day_weather.temp.max - 273.15) + \"邃ソ"}</p>\n      <p>{parseInt(day_weather.temp.min - 273.15) + \"邃ソ"}</p>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}