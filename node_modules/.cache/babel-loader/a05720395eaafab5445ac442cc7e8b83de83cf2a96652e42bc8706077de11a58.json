{"ast":null,"code":"var _jsxFileName = \"/Users/taekoharada/Documents/myProject/weather_forcast_react/src/components/Location.jsx\",\n  _s = $RefreshSig$();\n// A Location container including 'search form' and '3 days weather forecast'\n\nimport React, { useState, useEffect } from \"react\";\nimport { SearchForecast } from \"./SearchForecast\";\nimport { ThreeDaysForecast } from \"./ThreeDaysForecast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Location() {\n  _s();\n  const APIID = \"431416ee6ac11ff008eca9e762cf30d3\"; // Access key for OpenWeather\n  const DEFAULT_CITY = \"Calgary\"; //later it will be determine from user's location\n\n  const [city, setCity] = useState(DEFAULT_CITY);\n  const [weather, setWeather] = useState({\n    main: \"\"\n  });\n  const [loading, setLoading] = useState(true); //until fetching weather data, do not show weather information\n\n  // get lat and lon from city name\n  async function getCityData(city_name) {\n    try {\n      const response = await fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${city_name}&limit=1&appid=${APIID}`);\n      // No error in response data\n      if (response.ok) {\n        // empty object\n        if (Object.hasOwn(response)) {\n          console.log(\"No data: \", Object.keys(response).length);\n          throw new Error(Object.hasOwn(response));\n        } else {\n          const city_data = await response.json();\n          return city_data;\n        }\n      } else {\n        throw new Error(response.status);\n      }\n    } catch (err) {\n      console.error(\"ERROR\", err);\n      return err;\n    }\n  }\n\n  //get weather data from its position(lat, lon)\n  async function getWeatherData(lat, lon) {\n    console.log(lat, lon);\n    try {\n      const response = await fetch(`http://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&appid=${APIID}`);\n      // No error in response data\n      if (response.ok) {\n        const weather_data = await response.json();\n        return weather_data;\n      } else {\n        throw new Error(response.status);\n      }\n    } catch (err) {\n      console.error(\"ERROR\", err);\n      return err;\n    }\n  }\n  const onComponentMount = async () => {\n    console.log(\"Component is mounted!\");\n    const city_data = await getCityData(city);\n    return await getWeatherData(city_data[0].lat, city_data[0].lon);\n  };\n  useEffect(() => {\n    // Call the function when the component first mounts\n    onComponentMount().then(weather_data => {\n      setWeather({\n        main: weather_data.list[0].weather[0].main\n      });\n      console.log(weather_data.list[0].weather[0].main);\n    }).then(console.log(weather));\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: \"red\"\n        },\n        children: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchForecast, {\n        getCityData: getCityData,\n        city: city,\n        setCity: setCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: \"red\"\n        },\n        children: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchForecast, {\n        getCityData: getCityData,\n        city: city,\n        setCity: setCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ThreeDaysForecast, {\n        weather: weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(Location, \"IiEl9dc+wLR+4Idj2GsmpVd4ikc=\");\n_c = Location;\nvar _c;\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"names":["React","useState","useEffect","SearchForecast","ThreeDaysForecast","jsxDEV","_jsxDEV","Location","_s","APIID","DEFAULT_CITY","city","setCity","weather","setWeather","main","loading","setLoading","getCityData","city_name","response","fetch","ok","Object","hasOwn","console","log","keys","length","Error","city_data","json","status","err","error","getWeatherData","lat","lon","weather_data","onComponentMount","then","list","Fragment","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/taekoharada/Documents/myProject/weather_forcast_react/src/components/Location.jsx"],"sourcesContent":["// A Location container including 'search form' and '3 days weather forecast'\n\nimport React, { useState, useEffect } from \"react\";\nimport { SearchForecast } from \"./SearchForecast\";\nimport { ThreeDaysForecast } from \"./ThreeDaysForecast\";\n\nexport function Location() {\n  const APIID = \"431416ee6ac11ff008eca9e762cf30d3\"; // Access key for OpenWeather\n  const DEFAULT_CITY = \"Calgary\"; //later it will be determine from user's location\n\n  const [city, setCity] = useState(DEFAULT_CITY);\n  const [weather, setWeather] = useState({ main: \"\" });\n  const [loading, setLoading] = useState(true); //until fetching weather data, do not show weather information\n\n  // get lat and lon from city name\n  async function getCityData(city_name) {\n    try {\n      const response = await fetch(\n        `http://api.openweathermap.org/geo/1.0/direct?q=${city_name}&limit=1&appid=${APIID}`\n      );\n      // No error in response data\n      if (response.ok) {\n        // empty object\n        if (Object.hasOwn(response)) {\n          console.log(\"No data: \", Object.keys(response).length);\n          throw new Error(Object.hasOwn(response));\n        } else {\n          const city_data = await response.json();\n\n          return city_data;\n        }\n      } else {\n        throw new Error(response.status);\n      }\n    } catch (err) {\n      console.error(\"ERROR\", err);\n      return err;\n    }\n  }\n\n  //get weather data from its position(lat, lon)\n  async function getWeatherData(lat, lon) {\n    console.log(lat, lon);\n    try {\n      const response = await fetch(\n        `http://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&appid=${APIID}`\n      );\n      // No error in response data\n      if (response.ok) {\n        const weather_data = await response.json();\n        return weather_data;\n      } else {\n        throw new Error(response.status);\n      }\n    } catch (err) {\n      console.error(\"ERROR\", err);\n      return err;\n    }\n  }\n\n  const onComponentMount = async () => {\n    console.log(\"Component is mounted!\");\n\n    const city_data = await getCityData(city);\n    return await getWeatherData(city_data[0].lat, city_data[0].lon);\n  };\n\n  useEffect(() => {\n    // Call the function when the component first mounts\n    onComponentMount()\n      .then((weather_data) => {\n        setWeather({ main: weather_data.list[0].weather[0].main });\n        console.log(weather_data.list[0].weather[0].main);\n      })\n      .then(console.log(weather));\n  }, []);\n\n  if (loading) {\n    return (\n      <React.Fragment>\n        <h1 style={{ color: \"red\" }}>{city}</h1>\n        <SearchForecast\n          getCityData={getCityData}\n          city={city}\n          setCity={setCity}\n        />\n      </React.Fragment>\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <h1 style={{ color: \"red\" }}>{city}</h1>\n        <SearchForecast\n          getCityData={getCityData}\n          city={city}\n          setCity={setCity}\n        />\n        <ThreeDaysForecast weather={weather} />\n      </React.Fragment>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}