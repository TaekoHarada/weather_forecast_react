{"ast":null,"code":"var _jsxFileName = \"/Users/taekoharada/Documents/myProject/weather_forcast_react/src/components/Location.jsx\",\n  _s = $RefreshSig$();\n// A Location container including 'search form' and '3 days weather forecast'\n\nimport React, { useState, useEffect } from \"react\";\nimport { SearchForecast } from \"./SearchForecast\";\nimport { ThreeDaysForecast } from \"./ThreeDaysForecast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Location() {\n  _s();\n  const APIID = \"431416ee6ac11ff008eca9e762cf30d3\"; // Access key for OpenWeather\n  const DEFAULT_CITY = \"Calgary\"; //later it will be determine from user's location\n\n  const [city, setCity] = useState(DEFAULT_CITY);\n  const [weather, setWeather] = useState({});\n  const [loading, setLoading] = useState(true); //until fetching weather data, do not show weather information\n\n  // get lat and lon from city name\n  async function getCityData(city_name) {\n    try {\n      const response = await fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${city_name}&limit=1&appid=${APIID}`);\n      // No error in response data\n      if (response.ok) {\n        // empty object\n        if (Object.hasOwn(response)) {\n          console.log(\"No data: \", Object.keys(response).length);\n          throw new Error(Object.hasOwn(response));\n        } else {\n          const city_data = await response.json();\n          return city_data;\n        }\n      } else {\n        throw new Error(response.status);\n      }\n    } catch (error) {\n      console.error(\"ERROR\", error);\n      return error;\n    }\n  }\n\n  //get weather data from its position(lat, lon)\n  async function getWeatherData(lat, lon) {\n    try {\n      const response = await fetch(`http://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&appid=${APIID}`);\n      // No error in response data\n      if (response.ok) {\n        const weather_data = await response.json();\n        return weather_data;\n      } else {\n        throw new Error(response.status);\n      }\n    } catch (error) {\n      console.error(\"ERROR\", error);\n      return error;\n    }\n  }\n  const onComponentMount = async () => {\n    try {\n      console.log(\"Component is mounted!\");\n      const city_data = await getCityData(city);\n      const weather_data = await getWeatherData(city_data[0].lat, city_data[0].lon);\n\n      // Update the state with the fetched weather data\n      setWeather(weather_data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      return error;\n    } finally {\n      // Set loading to false after fetching data\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Call the function when the component first mounts\n    onComponentMount();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchForecast, {\n        city: city,\n        setCity: setCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchForecast, {\n        city: city,\n        setCity: setCity,\n        onComponentMount: onComponentMount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ThreeDaysForecast, {\n        weather: weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(Location, \"qPgux2xoS1e5p9BN5iMrhI4ROzw=\");\n_c = Location;\nvar _c;\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"names":["React","useState","useEffect","SearchForecast","ThreeDaysForecast","jsxDEV","_jsxDEV","Location","_s","APIID","DEFAULT_CITY","city","setCity","weather","setWeather","loading","setLoading","getCityData","city_name","response","fetch","ok","Object","hasOwn","console","log","keys","length","Error","city_data","json","status","error","getWeatherData","lat","lon","weather_data","onComponentMount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/taekoharada/Documents/myProject/weather_forcast_react/src/components/Location.jsx"],"sourcesContent":["// A Location container including 'search form' and '3 days weather forecast'\n\nimport React, { useState, useEffect } from \"react\";\nimport { SearchForecast } from \"./SearchForecast\";\nimport { ThreeDaysForecast } from \"./ThreeDaysForecast\";\n\nexport function Location() {\n  const APIID = \"431416ee6ac11ff008eca9e762cf30d3\"; // Access key for OpenWeather\n  const DEFAULT_CITY = \"Calgary\"; //later it will be determine from user's location\n\n  const [city, setCity] = useState(DEFAULT_CITY);\n  const [weather, setWeather] = useState({});\n  const [loading, setLoading] = useState(true); //until fetching weather data, do not show weather information\n\n  // get lat and lon from city name\n  async function getCityData(city_name) {\n    try {\n      const response = await fetch(\n        `http://api.openweathermap.org/geo/1.0/direct?q=${city_name}&limit=1&appid=${APIID}`\n      );\n      // No error in response data\n      if (response.ok) {\n        // empty object\n        if (Object.hasOwn(response)) {\n          console.log(\"No data: \", Object.keys(response).length);\n          throw new Error(Object.hasOwn(response));\n        } else {\n          const city_data = await response.json();\n\n          return city_data;\n        }\n      } else {\n        throw new Error(response.status);\n      }\n    } catch (error) {\n      console.error(\"ERROR\", error);\n      return error;\n    }\n  }\n\n  //get weather data from its position(lat, lon)\n  async function getWeatherData(lat, lon) {\n    try {\n      const response = await fetch(\n        `http://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&appid=${APIID}`\n      );\n      // No error in response data\n      if (response.ok) {\n        const weather_data = await response.json();\n        return weather_data;\n      } else {\n        throw new Error(response.status);\n      }\n    } catch (error) {\n      console.error(\"ERROR\", error);\n      return error;\n    }\n  }\n\n  const onComponentMount = async () => {\n    try {\n      console.log(\"Component is mounted!\");\n\n      const city_data = await getCityData(city);\n      const weather_data = await getWeatherData(\n        city_data[0].lat,\n        city_data[0].lon\n      );\n\n      // Update the state with the fetched weather data\n      setWeather(weather_data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      return error;\n    } finally {\n      // Set loading to false after fetching data\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Call the function when the component first mounts\n    onComponentMount();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"location\">\n        <h2>{city}</h2>\n        <SearchForecast city={city} setCity={setCity} />\n        <div>Loading...</div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"location\">\n        <h2>{city}</h2>\n        <SearchForecast\n          city={city}\n          setCity={setCity}\n          onComponentMount={onComponentMount}\n        />\n        <ThreeDaysForecast weather={weather} />\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}